# -*- coding: utf-8 -*-
# ##### BEGIN GPL LICENSE BLOCK #####
#
#  This program is free software; you can redistribute it and/or
#  modify it under the terms of the GNU General Public License
#  as published by the Free Software Foundation; either version 2
#  of the License, or (at your option) any later version.
#
#  This program is distributed in the hope that it will be useful,
#  but WITHOUT ANY WARRANTY; without even the implied warranty of
#  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#  GNU General Public License for more details.
#
#  You should have received a copy of the GNU General Public License
#  along with this program; if not, write to the Free Software Foundation,
#  Inc., 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301, USA.
#
# ##### END GPL LICENSE BLOCK #####

from collections import defaultdict

import bpy
import nodeitems_utils
from nodeitems_utils import NodeCategory, NodeItem, NodeItemCustom

import sverchok
from sverchok.ui.nodeview_space_menu import layout_draw_categories




"""
this file hopes to allow simple access (via an autogenerated menu) to 
custom nodes which are stored in:
    <your path>datafiles/sverchok/user_nodes/..

    the full path to <datafiles/sverchok..> is found using
        datafiles = os.path.join(bpy.utils.user_resource('DATAFILES', path='sverchok', create=True))

"""

sv_tree_types = {'SverchCustomTreeType', 'SverchGroupTreeType'}
usernodes_dict = defaultdict(set)


def register_class_and_menu(class_reference, menu_path):
    if not menu_path:
        menu_path = 'unsorted'
    usernodes_dict[menu_path].add(tuple([class_reference.bl_idname, class_reference.bl_label]))
    bpy.utils.register_class(class_reference)
    print("registered new user node")


def clear_usernodes_dict():
    usernodes_dict.clear()


class NODEVIEW_MT_UserNodes_Menu(bpy.types.Menu):
    bl_label = "Sv User Nodes"

    @classmethod
    def poll(cls, context):
        tree_type = context.space_data.tree_type
        if tree_type in sv_tree_types:
            return True

    def draw(self, context):

        add_n_grab = 'node.add_node'
        layout = self.layout
        layout.operator_context = 'INVOKE_REGION_WIN'

        for cat, catitems in usernodes_dict.items():
            node_details = [[_node[0]] for _node in catitems]
            layout.label(cat)
            layout_draw_categories(layout, node_details)
            # layout.operator_menu_enum(add_n_grab, property, text=cat)
            # layout.separator()

classes = [NODEVIEW_MT_UserNodes_Menu,]


def register():
    for class_name in classes:
        bpy.utils.register_class(class_name)


def unregister():
    for class_name in classes:
        bpy.utils.unregister_class(class_name)