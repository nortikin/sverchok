{
  "export_version": "0.079",
  "framed_nodes": {},
  "groups": {},
  "nodes": {
    "Scripted Node Lite": {
      "bl_idname": "SvScriptNodeLite",
      "color": [
        0.0,
        0.800000011920929,
        0.949999988079071
      ],
      "height": 100.0,
      "hide": false,
      "label": "",
      "location": [
        -545.463134765625,
        -83.19558715820312
      ],
      "params": {
        "float_list": [
          1.0,
          3.0,
          0.0,
          0.12999999523162842,
          0.0,
          0.0,
          0.0,
          0.0,
          0.0,
          0.0,
          0.0,
          0.0,
          0.0,
          0.0,
          0.0,
          0.0,
          0.0,
          0.0,
          0.0,
          0.0,
          0.0,
          0.0,
          0.0,
          0.0,
          0.0,
          0.0,
          0.0,
          0.0,
          0.0,
          0.0,
          0.0,
          0.0
        ],
        "inject_params": 0,
        "injected_state": 0,
        "int_list": [
          0,
          0,
          300,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0
        ],
        "script_name": "archimedes_spiral.py",
        "script_str": "\"\"\"\nin arc         s  d=1.0   n=2\nin separation  s  d=3.0   n=2\nin num_points  s  d=300   n=2\nin scale       s  d=0.13  n=2\nout verts      v\n\"\"\"\n\nimport math\n\ndef spiral_points(scale, arc=1, separation=1):\n    \"\"\"\n    lifted directly from: \n    http://stackoverflow.com/a/27528612/1243487 \n    by user: liborm\n\n    generate points on an Archimedes' spiral\n    with `arc` giving the length of arc between two points\n    and `separation` giving the distance between consecutive \n    turnings\n    - approximate arc length with circle arc at given distance\n    - use a spiral equation r = b * phi\n    \"\"\"\n    def p2c(r, phi):\n        \"\"\"polar to cartesian\n        \"\"\"\n        return (scale * r * math.cos(phi), scale * r * math.sin(phi), 0)\n\n    # yield a point at origin\n    # not using the origin may give better results\n    yield (0, 0, 0) \n\n    # initialize the next point in the required distance\n    r = arc\n    b = separation / (2 * math.pi)\n    # find the first phi to satisfy distance of `arc` to the second point\n    phi = float(r) / b\n    while True:\n        yield p2c(r, phi)\n        # advance the variables\n        # calculate phi that will give desired arc length at current radius\n        # (approximating with circle)\n        phi += float(arc) / r\n        r = b * phi\n\n\npoint_gen = spiral_points(scale, arc, separation)\n\nverts = [[]]\npoint = verts[0].append\nfor i in range(num_points):\n    point(next(point_gen))\n"
      },
      "snlite_ui": [],
      "use_custom_color": true,
      "width": 140.0
    },
    "UV Connection": {
      "bl_idname": "LineConnectNodeMK2",
      "height": 100.0,
      "hide": false,
      "label": "",
      "location": [
        -281.4268798828125,
        34.664798736572266
      ],
      "params": {
        "polygons": "Edges"
      },
      "width": 140.0
    },
    "Viewer Draw": {
      "bl_idname": "SvVDExperimental",
      "color": [
        1.0,
        0.30000001192092896,
        0.0
      ],
      "height": 100.0,
      "hide": false,
      "label": "",
      "location": [
        -47.72090148925781,
        49.066837310791016
      ],
      "params": {
        "activate": 1
      },
      "use_custom_color": true,
      "width": 140.0
    }
  },
  "update_lists": [
    [
      "Scripted Node Lite",
      0,
      "UV Connection",
      0
    ],
    [
      "UV Connection",
      0,
      "Viewer Draw",
      0
    ],
    [
      "UV Connection",
      1,
      "Viewer Draw",
      1
    ]
  ]
}