{
  "export_version": "0.072",
  "framed_nodes": {
    "A Number": "Frame.001",
    "A Number.001": "Frame.001",
    "Delete Loose": "Frame.005",
    "Exec Node Mod": "Frame.003",
    "Exec Node Mod.001": "Frame.004",
    "Frame.001": "Frame",
    "Frame.002": "Frame",
    "Frame.003": "Frame",
    "Frame.004": "Frame",
    "Frame.005": "Frame",
    "Frame.006": "Frame",
    "Frame.007": "Frame",
    "Frame.009": "Frame.003",
    "Frame.010": "Frame.002",
    "List Match": "Frame.004",
    "Matrix Apply (verts)": "Frame.006",
    "Matrix Math": "Frame.007",
    "Matrix normal": "Frame.006",
    "Matrix out": "Frame.006",
    "Mesh Join": "Frame.005",
    "Note": "Frame",
    "Objects in mk3": "Frame.001",
    "Remove Doubles": "Frame.005",
    "Reroute": "Frame",
    "Reroute.001": "Frame",
    "Reroute.002": "Frame",
    "Reroute.003": "Frame",
    "Scripted Node Lite": "Frame.002",
    "Scripted Node Lite.001": "Frame.002",
    "Socket Converter": "Frame.004",
    "Suzanne": "Frame.001",
    "Triangulate mesh": "Frame.010",
    "UV Connection": "Frame.005",
    "Vector polar output": "Frame.009",
    "Viewer Draw": "Frame.005",
    "Viewer Draw.002": "Frame.006",
    "Viewer text mk3": "Frame.004"
  },
  "groups": {},
  "nodes": {
    "A Number": {
      "bl_idname": "SvNumberNode",
      "height": 100.0,
      "hide": false,
      "label": "\u0422\u041e\u0427\u041d\u041e\u0421\u0422\u042c",
      "location": [
        -1213.150146484375,
        -279.04412841796875
      ],
      "params": {
        "float_": 0.0,
        "int_": 50,
        "selected_mode": "int",
        "show_limits": 0,
        "to3d": 1
      },
      "width": 214.7891845703125
    },
    "A Number.001": {
      "bl_idname": "SvNumberNode",
      "height": 100.0,
      "hide": false,
      "label": "\u0427\u0418\u0421\u041b\u041e \u0422\u041e\u0427\u0415\u041a",
      "location": [
        -1213.150146484375,
        -356.29547119140625
      ],
      "params": {
        "float_": 0.0,
        "int_": 3,
        "int_max": 10,
        "int_min": 1,
        "selected_mode": "int",
        "show_limits": 0,
        "to3d": 1
      },
      "width": 214.7891845703125
    },
    "Delete Loose": {
      "bl_idname": "SvDeleteLooseNode",
      "height": 100.0,
      "hide": false,
      "label": "",
      "location": [
        2171.8038330078125,
        249.37747192382812
      ],
      "params": {},
      "width": 140.0
    },
    "Exec Node Mod": {
      "bl_idname": "SvExecNodeMod",
      "height": 100.0,
      "hide": false,
      "label": "",
      "location": [
        712.0488243103027,
        206.2314453125
      ],
      "params": {},
      "string_storage": "{\"lines\": [\"k={}\", \"for i1, i2 in zip(V1[0], V2[0]):\", \"    if not round(i2*V3[0][0]) in k:\", \"        k[round(i2*V3[0][0])] = []\", \"    k[round(i2*V3[0][0])].append(i1)\", \"# print(k)\", \"for j in k.values():\", \"    j.sort(key=lambda x:x[2])\", \"    out.append(j)\"]}",
      "width": 289.0
    },
    "Exec Node Mod.001": {
      "bl_idname": "SvExecNodeMod",
      "height": 100.0,
      "hide": false,
      "label": "",
      "location": [
        1133.31005859375,
        23.05963897705078
      ],
      "params": {},
      "string_storage": "{\"lines\": [\"from sverchok.data_structure import match_long_repeat as mlr\", \"out_ = mlr(V1)\", \"extend(out_)\", \"\", \"\", \"\"]}",
      "width": 516.3656005859375
    },
    "Frame": {
      "bl_idname": "NodeFrame",
      "color": [
        0.6161344647407532,
        0.3135945796966553,
        0.4822174906730652
      ],
      "height": 857.449951171875,
      "hide": false,
      "label": "Sverchok_viewer",
      "location": [
        -2209.62744140625,
        443.05426025390625
      ],
      "params": {},
      "use_custom_color": true,
      "width": 3996.229248046875
    },
    "Frame.001": {
      "bl_idname": "NodeFrame",
      "color": [
        0.3741852939128876,
        0.6080000996589661,
        0.37504634261131287
      ],
      "height": 687.2230224609375,
      "hide": false,
      "label": "\u0432\u0432\u043e\u0434",
      "location": [
        225.573974609375,
        76.6015625
      ],
      "params": {},
      "use_custom_color": true,
      "width": 284.2349853515625
    },
    "Frame.002": {
      "bl_idname": "NodeFrame",
      "color": [
        0.6080000996589661,
        0.5022671818733215,
        0.28525370359420776
      ],
      "height": 412.28826904296875,
      "hide": false,
      "label": "\u0441\u043e\u0437\u0434\u0430\u043d\u0438\u0435 \u0441\u043b\u0443\u0447\u0430\u0439\u043d\u044b\u0445 \u0442\u043e\u0447\u0435\u043a \u043d\u0430 \u043f\u043e\u043b\u0438\u0433",
      "location": [
        587.371337890625,
        -185.34442138671875
      ],
      "params": {},
      "use_custom_color": true,
      "width": 436.77978515625
    },
    "Frame.003": {
      "bl_idname": "NodeFrame",
      "color": [
        0.6080000996589661,
        0.4377041757106781,
        0.2951887249946594
      ],
      "height": 397.87847900390625,
      "hide": false,
      "label": "\u0441\u043e\u0440\u0442\u0438\u0440\u043e\u0432\u043a\u0430 \u043f\u043e \u0433\u0440\u0430\u0434\u0443\u0441\u0443 \u0438 \u0432\u044b\u0441\u043e\u0442\u0435",
      "location": [
        730.37939453125,
        138.9658203125
      ],
      "params": {},
      "use_custom_color": true,
      "width": 605.705810546875
    },
    "Frame.004": {
      "bl_idname": "NodeFrame",
      "color": [
        0.6080001592636108,
        0.49698448181152344,
        0.48075783252716064
      ],
      "height": 581.4423217773438,
      "hide": false,
      "label": "\u0432\u044b\u0440\u0430\u0432\u043d\u044f\u0442\u044c \u0441\u043f\u0438\u0441\u043a\u0438 \u043f\u043e \u043d\u0430\u0438\u0431\u043e\u043b\u044c\u0448\u0435\u043c\u0443",
      "location": [
        -407.4627685546875,
        22.656219482421875
      ],
      "params": {},
      "use_custom_color": true,
      "width": 593.2923583984375
    },
    "Frame.005": {
      "bl_idname": "NodeFrame",
      "color": [
        0.6080000996589661,
        0.3966374695301056,
        0.4414104223251343
      ],
      "height": 330.03466796875,
      "hide": false,
      "label": "\u0412\u042b\u0412\u041e\u0414",
      "location": [
        735.765869140625,
        27.78704833984375
      ],
      "params": {},
      "use_custom_color": true,
      "width": 915.869384765625
    },
    "Frame.006": {
      "bl_idname": "NodeFrame",
      "color": [
        0.5075298547744751,
        0.6080000996589661,
        0.4174765944480896
      ],
      "height": 330.11444091796875,
      "hide": false,
      "label": "\u0432\u0440\u0430\u0449\u044f\u0435\u043c \u0434\u043b\u044f \u043e\u043f\u0440\u0435\u0434\u0435\u043b\u0435\u043d\u0438\u044f \u043d\u0430\u043f\u0440\u0430\u0432\u043b\u0435\u043d",
      "location": [
        211.369384765625,
        187.55091857910156
      ],
      "params": {},
      "use_custom_color": true,
      "width": 780.5791015625
    },
    "Frame.007": {
      "bl_idname": "NodeFrame",
      "color": [
        0.6080000996589661,
        0.4784124195575714,
        0.5489460229873657
      ],
      "height": 157.52056884765625,
      "hide": false,
      "label": "\u0432\u0440\u0430\u0449\u0430\u0435\u043c \u043e\u0431\u0440\u0430\u0442\u043d\u043e",
      "location": [
        472.931396484375,
        88.91232299804688
      ],
      "params": {},
      "use_custom_color": true,
      "width": 200.35302734375
    },
    "Frame.009": {
      "bl_idname": "NodeFrame",
      "height": 230.140869140625,
      "hide": false,
      "label": "\u0438\u0437\u0432\u043b\u0435\u0447\u0435\u043d\u0438\u0435 \u0433\u0440\u0430\u0434\u0443\u0441\u0430 \u043f\u043e\u043b\u043e\u0436\u0435\u043d\u0438\u044f",
      "location": [
        179.539794921875,
        125.30807495117188
      ],
      "params": {},
      "width": 160.35302734375
    },
    "Frame.010": {
      "bl_idname": "NodeFrame",
      "height": 336.1309814453125,
      "hide": false,
      "label": "\u041f\u041e\u041d\u0418\u041c\u0410\u0415\u0422 \u0422\u0420\u0415\u0423\u0413\u041e\u041b\u042c\u041d\u0418\u041a\u0418",
      "location": [
        148.32705688476562,
        40.51210021972656
      ],
      "params": {},
      "width": 200.35302734375
    },
    "List Match": {
      "bl_idname": "ListMatchNode",
      "height": 100.0,
      "hide": false,
      "label": "",
      "location": [
        1127.0142822265625,
        260.4642028808594
      ],
      "params": {
        "level": 3
      },
      "width": 140.0
    },
    "Matrix Apply (verts)": {
      "bl_idname": "MatrixApplyNode",
      "height": 100.0,
      "hide": false,
      "label": "",
      "location": [
        -517.5262451171875,
        92.35980987548828
      ],
      "params": {},
      "width": 125.66911315917969
    },
    "Matrix Math": {
      "bl_idname": "SvMatrixMathNode",
      "height": 100.0,
      "hide": false,
      "label": "Matrix Invert",
      "location": [
        1884.14208984375,
        -253.30288696289062
      ],
      "params": {
        "operation": "INVERT"
      },
      "width": 140.0
    },
    "Matrix normal": {
      "bl_idname": "SvMatrixNormalNode",
      "custom_socket_props": {
        "0": {
          "prop": [
            0.0,
            0.0,
            0.0
          ],
          "use_prop": true
        },
        "1": {
          "prop": [
            0.0,
            0.0,
            0.0
          ],
          "use_prop": true
        }
      },
      "height": 100.0,
      "hide": false,
      "label": "",
      "location": [
        -725.8275756835938,
        11.136672973632812
      ],
      "params": {
        "track": "Z",
        "up": "Y"
      },
      "width": 140.0
    },
    "Matrix out": {
      "bl_idname": "MatrixOutNode",
      "height": 100.0,
      "hide": false,
      "label": "",
      "location": [
        -906.5106201171875,
        2.9346771240234375
      ],
      "params": {},
      "width": 140.0
    },
    "Mesh Join": {
      "bl_idname": "SvMeshJoinNode",
      "height": 100.0,
      "hide": false,
      "label": "",
      "location": [
        2343.237060546875,
        250.13998413085938
      ],
      "params": {},
      "width": 140.0
    },
    "Note": {
      "bl_idname": "NoteNode",
      "color": [
        1.0,
        0.8993440270423889,
        0.9742509722709656
      ],
      "height": 100.0,
      "hide": false,
      "label": "",
      "location": [
        -748.621826171875,
        342.33221435546875
      ],
      "params": {
        "show_text": 0,
        "text": "\u041d\u0418\u041a\u0418\u0422\u0420\u041e\u041d 2018 - \u0421\u041e\u0417\u0414\u0410\u041d\u0418\u0415 \u0418 \u0421\u041e\u0415\u0414\u0418\u041d\u0415\u041d\u0418\u0415 \u0422\u041e\u0427\u0415\u041a \u041d\u0410 \u041f\u041e\u0412\u0415\u0420\u0425\u041d\u041e\u0421\u0422\u0418"
      },
      "use_custom_color": true,
      "width": 400.0
    },
    "Objects in mk3": {
      "bl_idname": "SvObjectsNodeMK3",
      "color": [
        0.904932975769043,
        1.0,
        0.883421003818512
      ],
      "height": 100.0,
      "hide": false,
      "label": "\u0422\u041e\u0427\u041a\u0410 Z \u0414\u041b\u042f \u041f\u041e\u0412\u041e\u0420\u041e\u0422\u0410",
      "location": [
        -1218.8074951171875,
        202.2818603515625
      ],
      "object_names": [
        "Empty"
      ],
      "params": {},
      "use_custom_color": true,
      "width": 223.8819580078125
    },
    "Remove Doubles": {
      "bl_idname": "SvRemoveDoublesNode",
      "height": 100.0,
      "hide": false,
      "label": "",
      "location": [
        1998.656494140625,
        244.51678466796875
      ],
      "params": {},
      "width": 140.0
    },
    "Reroute": {
      "bl_idname": "NodeReroute",
      "height": 100.0,
      "hide": false,
      "label": "\u041c\u0410\u0422\u0420\u0418\u0426\u0410",
      "location": [
        -199.768798828125,
        -341.42510986328125
      ],
      "params": {},
      "width": 16.0
    },
    "Reroute.001": {
      "bl_idname": "NodeReroute",
      "height": 100.0,
      "hide": false,
      "label": "\u0422\u041e\u0427\u041d\u041e\u0421\u0422\u042c",
      "location": [
        399.788330078125,
        -272.56964111328125
      ],
      "params": {},
      "width": 16.0
    },
    "Reroute.002": {
      "bl_idname": "NodeReroute",
      "height": 100.0,
      "hide": false,
      "label": "\u041f\u041e\u041b\u0418\u0413\u041e\u041d\u042b",
      "location": [
        -833.47802734375,
        -220.28179931640625
      ],
      "params": {},
      "width": 16.0
    },
    "Reroute.003": {
      "bl_idname": "NodeReroute",
      "height": 100.0,
      "hide": false,
      "label": "\u0422\u041e\u0427\u041a\u0418 \u0425\u0410\u041e\u0421",
      "location": [
        381.303955078125,
        -111.63836669921875
      ],
      "params": {},
      "width": 16.0
    },
    "Scripted Node Lite": {
      "bl_idname": "SvScriptNodeLite",
      "color": [
        0.0,
        0.800000011920929,
        0.949999988079071
      ],
      "height": 100.0,
      "hide": false,
      "label": "\u041d\u0415 \u041f\u041e\u0414\u0425\u041e\u0414\u0418\u0422",
      "location": [
        154.53732299804688,
        166.11181640625
      ],
      "params": {
        "float_list": [
          0.0,
          0.0,
          0.4000000059604645,
          0.0,
          0.0,
          0.0,
          0.0,
          0.0,
          0.0,
          0.0,
          0.0,
          0.0,
          0.0,
          0.0,
          0.0,
          0.0,
          0.0,
          0.0,
          0.0,
          0.0,
          0.0,
          0.0,
          0.0,
          0.0,
          0.0,
          0.0,
          0.0,
          0.0,
          0.0,
          0.0,
          0.0,
          0.0
        ],
        "inject_params": 0,
        "injected_state": 0,
        "int_list": [
          0,
          0,
          0,
          100,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0
        ],
        "script_name": "random_verts_on_polygons.py.001",
        "script_str": "\"\"\"\nin normals v .=[] .=0\nin coords v .=[] .=0\nin radius s .=0.4 .=2\nin num_tries s .=100 .=2\nout new_verts v\n\"\"\"\n\n# taken from http://stackoverflow.com/a/29354206/1243487\n# translated to python and modified for sverchok.\n\nfrom math import sqrt, cos, sin, pi as M_PI\nfrom random import uniform as rand\n\n\ndef crossp(u, v):\n    w = [0, 0, 0]\n    w[0] = (u[1] * v[2]) - (u[2] * v[1])\n    w[1] = (u[2] * v[0]) - (u[0] * v[2])\n    w[2] = (u[0] * v[1]) - (u[1] * v[0])\n    return w  # vec3\n\ndef dotp(u, v):\n    return (u[0] * v[0]) + (u[1] * v[1]) + (u[2] * v[2])  # float\n\ndef norm2(u):\n    return dotp(u, u)  # float\n\ndef norm(u):\n    return sqrt(norm2(u))  # float\n\ndef scale(u, s):\n    return [u[0] * s, u[1] * s, u[2] * s]  # vec3\n\ndef add(u, v):\n    return [u[0] + v[0], u[1] + v[1], u[2] + v[2]] # vec3\n\ndef normalize(u):\n    return scale(u, 1/norm(u)) # vec3\n\n\ndef random_on_plane(r, n, co):\n    \"\"\"\n    generates a random point on the plane ax + by + cz = d\n    \"\"\"\n    n = list(n)\n    co = list(co)\n    d = dotp(n, co)\n    xorz = [1, 0, 0] if (n[0] == 0) else [0, 0, 1]\n    w = crossp(n, xorz)\n\n    theta = rand(0, 1) * 2 * M_PI\n    k = normalize(n)\n    w = add(scale(w, cos(theta)), \n            scale(crossp(k, w), sin(theta)))\n\n    if r == 0:\n        w = scale(w, r/norm(w))\n    else:\n        rand_r = rand(0, 1) * r\n        w = scale(w, rand_r/norm(w))\n\n    if d != 0:\n        t = scale(n, d / norm2(n))  # vec3\n        w = add(w, t)\n\n    return w\n\n\nnew_verts = []\nfor nlist, colist in zip(normals, coords):\n    sublist = []\n    for n, co in zip(nlist, colist):\n        sublist.append([random_on_plane(radius, n, co) for _ in range(num_tries)])\n    new_verts.append(sublist)\n\nnew_verts = [new_verts]\n"
      },
      "snlite_ui": [],
      "use_custom_color": true,
      "width": 138.96189880371094
    },
    "Scripted Node Lite.001": {
      "bl_idname": "SvScriptNodeLite",
      "color": [
        0.0,
        0.800000011920929,
        0.949999988079071
      ],
      "height": 100.0,
      "hide": false,
      "label": "\u041f\u041e\u0414\u0425\u041e\u0414\u0418\u0422",
      "location": [
        146.31704711914062,
        -38.799468994140625
      ],
      "params": {
        "float_list": [
          0.0,
          0.0,
          0.1600000113248825,
          0.0,
          0.0,
          0.0,
          0.0,
          0.0,
          0.0,
          0.0,
          0.0,
          0.0,
          0.0,
          0.0,
          0.0,
          0.0,
          0.0,
          0.0,
          0.0,
          0.0,
          0.0,
          0.0,
          0.0,
          0.0,
          0.0,
          0.0,
          0.0,
          0.0,
          0.0,
          0.0,
          0.0,
          0.0
        ],
        "inject_params": 0,
        "injected_state": 0,
        "int_list": [
          0,
          0,
          2,
          3,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0,
          0
        ],
        "script_name": "pointsONface",
        "script_str": "\"\"\"\nin verts_list v\nin faces_list s\nin num_points s d=20 n=2\nout verts_out v\n\"\"\"\n\nimport bpy_extras\nimport mathutils\nfrom mathutils import Vector\nfrom bpy_extras import mesh_utils\n\nfor verts, faces in zip(verts_list, faces_list):\n\n    mesh = []\n    tessellated_faces = []\n    add_face = tessellated_faces.append\n\n    try:\n        for f in faces:\n            if len(f) in {3, 4}:\n                add_face(f)\n            else:\n                # Takes a list of polylines (each point a vector) and returns the point indices for a polyline filled with triangles.\n                v = [Vector(verts[i]) for i in f]\n                tess_poly = mathutils.geometry.tessellate_polygon([v])\n                for tess in tess_poly:\n                    add_face([f[i] for i in tess])\n\n        mesh = bpy.data.meshes.new(name=\"xxxxaaaa\")\n        mesh.from_pydata(verts, [], tessellated_faces)\n\n        tessfaces = mesh.polygons\n        new_verts = mesh_utils.face_random_points(num_points, tessfaces)\n        verts_out.append([v[:] for v in new_verts])\n        \n        if \"xxxxaaaa\" in bpy.data.meshes:\n            bpy.data.meshes.remove(mesh)\n\n    except Exception as err:\n        print('nope', err)\n\n\n\n\ndef face_random_points_ngons(num_points, tessfaces):\n\n    from random import random\n    import mathutils\n    from mathutils.geometry import area_tri, tessellate_polygon\n\n    # Split all quads into 2 tris, tris remain unchanged\n    tri_faces = []\n    for f in tessfaces:\n        tris = []\n        verts = f.id_data.vertices\n        fv = f.vertices[:]\n\n        if len(fv) == 3:\n            tris.append((verts[fv[0]].co, verts[fv[1]].co, verts[fv[2]].co))\n        elif len(fv) == 4:\n            tris.append((verts[fv[0]].co, verts[fv[1]].co, verts[fv[2]].co))\n            tris.append((verts[fv[0]].co, verts[fv[3]].co, verts[fv[2]].co))\n        else:\n            fvngon = [v.co for v in verts]\n            tris.extend([[fvngon[i] for i in tess] for tess in tessellate_polygon([fvngon])])\n\n        tri_faces.append(tris)\n\n    # For each face, generate the required number of random points\n    sampled_points = [None] * (num_points * len(tessfaces))\n    # sampled points need to be vectorized as npo below\n    for i, tf, npo in enumerate(zip(tri_faces,num_points)):\n        for k in range(npo):\n            # If this is a quad, we need to weight its 2 tris by their area\n            if len(tf) == 2:\n\n                area1 = area_tri(*tf[0])\n                area2 = area_tri(*tf[1])\n                area_tot = area1 + area2\n                area1 = area1 / area_tot\n                area2 = area2 / area_tot\n                vecs = tf[0 if (random() < area1) else 1]\n\n            elif len(tf) == 1:\n\n                vecs = tf[0]\n\n            else:\n\n                areas = [area_tri(*tface) for tface in tf]\n                area_tot = sum(areas)\n                areas = [(area / area_tot) for area in areas]\n\n                #  vecs = tf[0 if (random() < area1) else 1]   ???\n\n            u1 = random()\n            u2 = random()\n            u_tot = u1 + u2\n\n            if u_tot > 1:\n                u1 = 1.0 - u1\n                u2 = 1.0 - u2\n\n            side1 = vecs[1] - vecs[0]\n            side2 = vecs[2] - vecs[0]\n\n            p = vecs[0] + u1 * side1 + u2 * side2\n\n            sampled_points[npo * i + k] = p\n\n    return sampled_points"
      },
      "snlite_ui": [],
      "use_custom_color": true,
      "width": 140.0
    },
    "Socket Converter": {
      "bl_idname": "ConverterNode",
      "color": [
        0.602957010269165,
        0.6740000247955322,
        0.5642769932746887
      ],
      "height": 100.0,
      "hide": true,
      "label": "",
      "location": [
        1494.1644287109375,
        85.97092056274414
      ],
      "params": {},
      "use_custom_color": true,
      "width": 140.0
    },
    "Suzanne": {
      "bl_idname": "SvSuzanneNode",
      "color": [
        0.9200000166893005,
        0.9200000166893005,
        0.9200000166893005
      ],
      "height": 100.0,
      "hide": false,
      "label": "",
      "location": [
        -1216.3143310546875,
        -149.897705078125
      ],
      "params": {},
      "use_custom_color": true,
      "width": 216.2576904296875
    },
    "Triangulate mesh": {
      "bl_idname": "SvTriangulateNode",
      "height": 100.0,
      "hide": false,
      "label": "",
      "location": [
        -52.7508544921875,
        120.13095092773438
      ],
      "params": {},
      "width": 140.0
    },
    "UV Connection": {
      "bl_idname": "LineConnectNodeMK2",
      "height": 100.0,
      "hide": false,
      "label": "",
      "location": [
        1801.2000732421875,
        243.36181640625
      ],
      "params": {
        "dir_check": "U_dir",
        "polygons": "Edges",
        "slice_check": 0
      },
      "width": 140.0
    },
    "Vector polar output": {
      "bl_idname": "VectorPolarOutNode",
      "height": 100.0,
      "hide": false,
      "label": "",
      "location": [
        485.8722839355469,
        131.67025756835938
      ],
      "params": {},
      "width": 100.0
    },
    "Viewer Draw": {
      "bl_idname": "ViewerNode2",
      "color": [
        0.6284880042076111,
        0.931007981300354,
        1.0
      ],
      "height": 100.0,
      "hide": false,
      "label": "",
      "location": [
        2516.7164306640625,
        251.68173217773438
      ],
      "params": {
        "activate": 1,
        "display_verts": 1,
        "edge_colors": [
          0.011090919375419617,
          0.8990001082420349,
          0.011498752050101757
        ],
        "edge_width": 1,
        "vertex_colors": [
          0.011952302418649197,
          1.0,
          0.012398838065564632
        ],
        "vertex_size": 2.0
      },
      "use_custom_color": true,
      "width": 140.0
    },
    "Viewer Draw.002": {
      "bl_idname": "ViewerNode2",
      "color": [
        0.6284880042076111,
        0.931007981300354,
        1.0
      ],
      "height": 100.0,
      "hide": false,
      "label": "",
      "location": [
        -326.28448486328125,
        137.4085693359375
      ],
      "params": {
        "activate": 0
      },
      "use_custom_color": true,
      "width": 140.0
    },
    "Viewer text mk3": {
      "bl_idname": "ViewerNodeTextMK3",
      "color": [
        1.0,
        0.8993440270423889,
        0.9742509722709656
      ],
      "height": 100.0,
      "hide": false,
      "label": "",
      "location": [
        1312.92138671875,
        268.0305480957031
      ],
      "params": {},
      "use_custom_color": true,
      "width": 140.0
    }
  },
  "update_lists": [
    [
      "Suzanne",
      "Faces",
      "Reroute.002",
      "Input"
    ],
    [
      "Objects in mk3",
      3,
      "Matrix out",
      0
    ],
    [
      "Matrix out",
      0,
      "Matrix normal",
      1
    ],
    [
      "Suzanne",
      0,
      "Matrix Apply (verts)",
      0
    ],
    [
      "Matrix normal",
      0,
      "Matrix Apply (verts)",
      1
    ],
    [
      "Matrix Apply (verts)",
      0,
      "Viewer Draw.002",
      0
    ],
    [
      "Reroute.002",
      "Output",
      "Viewer Draw.002",
      "edg_pol"
    ],
    [
      "Matrix normal",
      "Matrix",
      "Reroute",
      "Input"
    ],
    [
      "Matrix Apply (verts)",
      0,
      "Triangulate mesh",
      0
    ],
    [
      "Reroute.002",
      "Output",
      "Triangulate mesh",
      "Polygons"
    ],
    [
      "Triangulate mesh",
      0,
      "Scripted Node Lite.001",
      0
    ],
    [
      "Triangulate mesh",
      2,
      "Scripted Node Lite.001",
      1
    ],
    [
      "A Number.001",
      0,
      "Scripted Node Lite.001",
      2
    ],
    [
      "Scripted Node Lite.001",
      "verts_out",
      "Reroute.003",
      "Input"
    ],
    [
      "A Number",
      "Int",
      "Reroute.001",
      "Input"
    ],
    [
      "Reroute.003",
      "Output",
      "Vector polar output",
      "Vectors"
    ],
    [
      "Reroute.003",
      "Output",
      "Exec Node Mod",
      "V1"
    ],
    [
      "Vector polar output",
      1,
      "Exec Node Mod",
      1
    ],
    [
      "Reroute.001",
      "Output",
      "Exec Node Mod",
      "V3"
    ],
    [
      "Exec Node Mod",
      0,
      "Exec Node Mod.001",
      0
    ],
    [
      "Exec Node Mod.001",
      0,
      "Socket Converter",
      0
    ],
    [
      "Socket Converter",
      0,
      "UV Connection",
      0
    ],
    [
      "UV Connection",
      0,
      "Remove Doubles",
      1
    ],
    [
      "UV Connection",
      1,
      "Remove Doubles",
      2
    ],
    [
      "Remove Doubles",
      0,
      "Delete Loose",
      0
    ],
    [
      "Remove Doubles",
      1,
      "Delete Loose",
      1
    ],
    [
      "Reroute",
      "Output",
      "Matrix Math",
      "A"
    ],
    [
      "Delete Loose",
      0,
      "Mesh Join",
      0
    ],
    [
      "Delete Loose",
      1,
      "Mesh Join",
      1
    ],
    [
      "Mesh Join",
      0,
      "Viewer Draw",
      0
    ],
    [
      "Mesh Join",
      1,
      "Viewer Draw",
      1
    ],
    [
      "Matrix Math",
      0,
      "Viewer Draw",
      2
    ]
  ]
}